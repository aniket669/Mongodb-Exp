index.js:
const express = require("express");
const bodyParser = require("body-parser");

const app = express();

// Only parse JSON for POST routes
app.use("/lock", bodyParser.json());
app.use("/book", bodyParser.json());

// Server port
const PORT = 5200;

// Initialize seats
const TOTAL_SEATS = 10;
const seats = {};
for (let i = 1; i <= TOTAL_SEATS; i++) {
  seats[i] = { status: "available", lockedBy: null, lockTime: null };
}

// Lock expiration time: 1 minute
const LOCK_DURATION = 60 * 1000;

// Clean expired locks
function cleanExpiredLocks() {
  const now = Date.now();
  for (let seatId in seats) {
    if (seats[seatId].status === "locked" && now - seats[seatId].lockTime > LOCK_DURATION) {
      seats[seatId].status = "available";
      seats[seatId].lockedBy = null;
      seats[seatId].lockTime = null;
    }
  }
}

// Home route
app.get("/", (req, res) => {
  res.send("ðŸŽ« Welcome to the Ticket Booking API! Use /seats, /lock/:seatId, /book/:seatId.");
});

// Get all seats
app.get("/seats", (req, res) => {
  cleanExpiredLocks();
  res.json(seats);
});

// Lock a seat
app.post("/lock/:seatId", (req, res) => {
  cleanExpiredLocks();
  const seatId = req.params.seatId;
  const { userId } = req.body;

  if (!seats[seatId]) return res.status(404).json({ error: "Seat not found" });

  if (seats[seatId].status === "available") {
    seats[seatId].status = "locked";
    seats[seatId].lockedBy = userId;
    seats[seatId].lockTime = Date.now();
    return res.json({ message: `Seat ${seatId} locked for ${userId}` });
  } else if (seats[seatId].status === "locked") {
    return res.status(400).json({ error: `Seat ${seatId} is already locked` });
  } else {
    return res.status(400).json({ error: `Seat ${seatId} is already booked` });
  }
});

// Book a seat
app.post("/book/:seatId", (req, res) => {
  cleanExpiredLocks();
  const seatId = req.params.seatId;
  const { userId } = req.body;

  if (!seats[seatId]) return res.status(404).json({ error: "Seat not found" });

  if (seats[seatId].status === "locked" && seats[seatId].lockedBy === userId) {
    seats[seatId].status = "booked";
    seats[seatId].lockedBy = null;
    seats[seatId].lockTime = null;
    return res.json({ message: `Seat ${seatId} successfully booked by ${userId}` });
  } else if (seats[seatId].status === "locked") {
    return res.status(400).json({ error: `Seat ${seatId} is locked by another user` });
  } else if (seats[seatId].status === "available") {
    return res.status(400).json({ error: `Seat ${seatId} is not locked by you` });
  } else {
    return res.status(400).json({ error: `Seat ${seatId} is already booked` });
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
package.json:
{
  "name": "ticket-booking",
  "version": "1.0.1",
  "description": "Concurrent Ticket Booking System with Seat Locking",
  "main": "index.js",
  "scripts": {
    "start": "nodemon index.js"
  },
  "keywords": ["ticket", "booking", "nodejs", "express", "concurrency"],
  "author": "Your Name",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.2",
    "body-parser": "^1.20.3"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}

